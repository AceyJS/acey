{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/louis/Acey/next-test/pages/_app.js\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport _ from 'lodash';\nimport { config } from 'acey';\nimport { withAcey } from 'next-acey-wrapper';\nconfig.setEnvAsNextJS();\nconfig.done();\n\nvar MyApp = function MyApp(props) {\n  var Component = props.Component,\n      pageProps = props.pageProps;\n  return __jsx(Component, _extends({}, pageProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }));\n}; // export const withAcey = (App) => {\n//     return class Wrap extends React.Component {\n//         constructor(props){\n//             super(props)\n//             !this.isServer() && manager.addPendingHydration(props.pageProps[STORE_KEY]) \n//         }\n//         static getInitialProps = async ({ Component, router, ctx }) => {\n//             let pageProps = {}\n//             if (!ctx) throw new Error('No page context');\n//             const prevInitialPropsFunction = Component.getInitialProps\n//             if (ctx.req && ctx.req.headers && ctx.req.headers.cookie) {\n//                 const cookies = {}\n//                 const gotCookies = Cookies.parse(ctx.req.headers.cookie)\n//                 for (let key in gotCookies){\n//                     if (manager.exist(key))\n//                         cookies[key] = JSON.parse(gotCookies[key])\n//                 }\n//                 manager.hydrateCookies(cookies)\n//             }\n//             if (Component.getInitialProps)\n//                 pageProps = await Component.getInitialProps(ctx)\n//             Component.getInitialProps = (ctx) => pageProps\n//             Component.getInitialProps = prevInitialPropsFunction\n//             const ret = { \n//                 pageProps: { ...pageProps }\n//             }\n//             ret.pageProps[STORE_KEY] = manager.store()\n//             return ret\n//         }\n//         isServer = () => typeof window === 'undefined'\n//         getClearedProps = () => {\n//             let newProps = {}\n//             for (let key in this.props){\n//                 if (key === 'pageProps'){\n//                     const copy = _.cloneDeep(this.props[key])\n//                     delete copy[STORE_KEY]\n//                     copy['isServer'] = this.isServer()\n//                     newProps[key] = copy\n//                 } else {\n//                     newProps[key] = this.props[key]\n//                 }\n//             }\n//             return newProps\n//         }\n//         render = () => <App {...this.getClearedProps()} />\n//     }\n// }\n\n\nexport default withAcey(MyApp);","map":{"version":3,"sources":["/Users/louis/Acey/next-test/pages/_app.js"],"names":["React","_","config","withAcey","setEnvAsNextJS","done","MyApp","props","Component","pageProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AAEAD,MAAM,CAACE,cAAP;AACAF,MAAM,CAACG,IAAP;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK,EAAI;AAAA,MACbC,SADa,GACYD,KADZ,CACbC,SADa;AAAA,MACFC,SADE,GACYF,KADZ,CACFE,SADE;AAErB,SACE,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAGD,CALD,C,CAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,eAAeN,QAAQ,CAACG,KAAD,CAAvB","sourcesContent":["import React from 'react'\nimport _ from 'lodash'\nimport { config } from 'acey'\nimport { withAcey } from 'next-acey-wrapper'\n\nconfig.setEnvAsNextJS()\nconfig.done()\n\nconst MyApp = props => {\n  const { Component, pageProps } = props\n  return (\n    <Component {...pageProps} />\n  )\n}\n\n// export const withAcey = (App) => {\n//     return class Wrap extends React.Component {\n        \n//         constructor(props){\n//             super(props)\n//             !this.isServer() && manager.addPendingHydration(props.pageProps[STORE_KEY]) \n//         }\n  \n//         static getInitialProps = async ({ Component, router, ctx }) => {\n//             let pageProps = {}\n  \n//             if (!ctx) throw new Error('No page context');\n//             const prevInitialPropsFunction = Component.getInitialProps\n    \n//             if (ctx.req && ctx.req.headers && ctx.req.headers.cookie) {\n//                 const cookies = {}\n//                 const gotCookies = Cookies.parse(ctx.req.headers.cookie)\n//                 for (let key in gotCookies){\n//                     if (manager.exist(key))\n//                         cookies[key] = JSON.parse(gotCookies[key])\n//                 }\n//                 manager.hydrateCookies(cookies)\n//             }\n            \n//             if (Component.getInitialProps)\n//                 pageProps = await Component.getInitialProps(ctx)\n            \n//             Component.getInitialProps = (ctx) => pageProps\n//             Component.getInitialProps = prevInitialPropsFunction\n  \n//             const ret = { \n//                 pageProps: { ...pageProps }\n//             }\n//             ret.pageProps[STORE_KEY] = manager.store()\n//             return ret\n//         }\n  \n//         isServer = () => typeof window === 'undefined'\n        \n//         getClearedProps = () => {\n//             let newProps = {}\n//             for (let key in this.props){\n//                 if (key === 'pageProps'){\n//                     const copy = _.cloneDeep(this.props[key])\n//                     delete copy[STORE_KEY]\n//                     copy['isServer'] = this.isServer()\n//                     newProps[key] = copy\n//                 } else {\n//                     newProps[key] = this.props[key]\n//                 }\n//             }\n//             return newProps\n//         }\n  \n//         render = () => <App {...this.getClearedProps()} />\n//     }\n// }\n\nexport default withAcey(MyApp)"]},"metadata":{},"sourceType":"module"}