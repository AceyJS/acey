{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexports.__esModule = true;\nexports.observeLayoutShift = observeLayoutShift;\nexports.observeLargestContentfulPaint = observeLargestContentfulPaint;\nexports.observePaint = observePaint;\n\nfunction isTypeSupported(type) {\n  if (self.PerformanceObserver && PerformanceObserver.supportedEntryTypes) {\n    return PerformanceObserver.supportedEntryTypes.includes(type);\n  }\n\n  return false;\n}\n\nfunction observeLayoutShift(onPerfEntry) {\n  if (isTypeSupported('layout-shift')) {\n    var cumulativeScore = 0;\n    var observer = new PerformanceObserver(function (list) {\n      var _iterator = _createForOfIteratorHelper(list.getEntries()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var entry = _step.value;\n\n          // Only count layout shifts without recent user input.\n          if (!entry.hadRecentInput) {\n            cumulativeScore += entry.value;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    });\n    observer.observe({\n      type: 'layout-shift',\n      buffered: true\n    });\n    document.addEventListener('visibilitychange', function clsObserver() {\n      if (document.visibilityState === 'hidden') {\n        // Force any pending records to be dispatched.\n        observer.takeRecords();\n        observer.disconnect();\n        document.removeEventListener('visibilitychange', clsObserver, true);\n        onPerfEntry({\n          name: 'cumulative-layout-shift',\n          value: cumulativeScore\n        });\n      }\n    }, true);\n  }\n}\n\nfunction observeLargestContentfulPaint(onPerfEntry) {\n  if (isTypeSupported('largest-contentful-paint')) {\n    // Create a variable to hold the latest LCP value (since it can change).\n    var lcp; // Create the PerformanceObserver instance.\n\n    var observer = new PerformanceObserver(function (entryList) {\n      var entries = entryList.getEntries();\n      var lastEntry = entries[entries.length - 1];\n      lcp = lastEntry.renderTime || lastEntry.loadTime;\n    });\n    observer.observe({\n      type: 'largest-contentful-paint',\n      buffered: true\n    });\n    document.addEventListener('visibilitychange', function lcpObserver() {\n      if (lcp && document.visibilityState === 'hidden') {\n        document.removeEventListener('visibilitychange', lcpObserver, true);\n        onPerfEntry({\n          name: 'largest-contentful-paint',\n          value: lcp\n        });\n      }\n    }, true);\n  }\n}\n\nfunction observePaint(onPerfEntry) {\n  var observer = new PerformanceObserver(function (list) {\n    list.getEntries().forEach(onPerfEntry);\n  });\n  observer.observe({\n    type: 'paint',\n    buffered: true\n  });\n}","map":null,"metadata":{},"sourceType":"script"}